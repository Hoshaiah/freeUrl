generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Click {
  id        String   @id
  linkId    String
  timestamp DateTime @default(now())
  Link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@index([linkId])
}

model EmailSignup {
  id        String   @id
  email     String
  linkId    String?
  createdAt DateTime @default(now())
  Link      Link?    @relation(fields: [linkId], references: [id])

  @@index([email])
  @@index([linkId])
}

model Link {
  id          String        @id
  shortCode   String        @unique
  originalUrl String
  createdAt   DateTime      @default(now())
  userId      String?
  isActive    Boolean       @default(true)
  Click       Click[]
  EmailSignup EmailSignup[]
  User        User?         @relation(fields: [userId], references: [id])

  @@index([isActive])
  @@index([userId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                     String   @id
  userId                 String   @unique
  stripeCustomerId       String   @unique
  stripeSubscriptionId   String   @unique
  stripePriceId          String
  stripeCurrentPeriodEnd DateTime
  plan                   String
  status                 String
  createdAt              DateTime @default(now())
  updatedAt              DateTime
  User                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@index([userId])
}

model User {
  id            String        @id
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  Account       Account[]
  Link          Link[]
  Session       Session[]
  Subscription  Subscription?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
